from db_api.models import Profile, ChatSession
from PIL import Image
import os
import hashlib
from typing import Optional
from services import bot, logger
from utils.enum import AiModelName
from uuid import UUID
from db_api import api_profile_async, api_image_query_async, api_chat_session_async
from utils.cache import set_cache_profile, serialization_profile, get_cache_profile, deserialization_profile
import httpx
import json
from utils.enum import Errors
import sqlalchemy
from aiogram.types import Message, User
import pandas
from config import settings

def create_photo(photo_byte: bytes, path_file: str):
    """–°–æ–∑–¥–∞–π —Ñ–æ—Ç–æ –∏–∑ –±–∞–π—Ç–æ–≤"""
    with open(path_file, 'wb') as image_file:
        image_file.write(photo_byte)
    return "Ok"

async def make_request(url):
    """–ü–æ–ª—É—á–∏ –¥–∞–Ω–Ω—ã–µ get –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        async with httpx.AsyncClient() as client:
            result = await client.get(url)
            return {
                "status_code": result.status_code,
                "result": result
            }
    except httpx.HTTPStatusError as e:
        return {
            "status_code": e.response.status_code,
            "result": e.response.text
        }

    except httpx.TimeoutException:
        return {
            "status_code": 408,  # –¢–∞–π–º-–∞—É—Ç
            "result": "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        }
    except httpx.RequestError as e:
        return {
            "status_code": 500,  # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            "result": str(e)
        }
    except json.JSONDecodeError:
        return {
            "status_code": 500,  # –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
            "result": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON"
        }

async def finish_generation_image(url_photo: str, image_id: UUID, profile: Profile) -> Profile:
    """–°–¥–µ–ª–∞–π –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await api_image_query_async.save_answer_query(url_photo, image_id)
    if profile.ai_model_id == AiModelName.MIDJOURNEY_5_2.value() and profile.mj_daily_limit_5_2 > 0:
        profile = await api_profile_async.subtracting_count_request_to_model_mj(profile.id, "5.2")
    elif profile.ai_models_id == AiModelName.MIDJOURNEY_6_0.value() and profile.mj_daily_limit_6_0 > 0:
        profile = await api_profile_async.subtracting_count_request_to_model_mj(profile.id, "6.0")
    return profile

def check_status_generic(session_profile: ChatSession) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not session_profile.active_generation:
        return {"status": Errors.NON_ERROR.name, "result": Errors.NON_ERROR.value}
    else:
        return {"status": Errors.ERROR_ACTIVE_GENERATE.name, "result": Errors.ERROR_ACTIVE_GENERATE.value}

def check_access_for_generic(user_profile: Profile, session_profile: ChatSession) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""

    status_generic = check_status_generic(session_profile)
    if status_generic["status"] != Errors.NON_ERROR.name:
        return status_generic

    if user_profile.tariffs.name == "Free":
        if user_profile.ai_model_id == AiModelName.GPT_4_O_MINI.value:
            if check_balance_profile(user_profile):
                return {"status": Errors.NON_ERROR.name, "result": Errors.NON_ERROR.value}
            else:
                return {"status": Errors.ERROR_BALANCE_FREE.name, "result": Errors.error_balance_free(str(user_profile.chatgpt_4o_mini_daily_limit))}
        else:
            return {"status": Errors.ERROR_TARIFF.name, "result": Errors.error_tariff(user_profile.ai_model_id, user_profile.tariffs.name)}
    else:
        if check_balance_profile(user_profile):
            return {"status": Errors.NON_ERROR.name, "result": Errors.NON_ERROR.value}
        else:
            return {"status": Errors.ERROR_BALANCE_PAID.name, "result": Errors.ERROR_BALANCE_PAID.value}

def get_bot():
    """–í–µ—Ä–Ω–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    return bot

def check_limits_for_free_tariff(profile: Profile):
    """–ü—Ä–æ–≤–µ—Ä—å —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é c —Ç–∞—Ä–∏—Ñ–æ–º Free —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    if profile.ai_models_id.code == "gpt-4o-mini" and profile.chatgpt_4o_mini_daily_limit != 0:
        return True
    elif profile.ai_models_id.code == "gpt-4o" and profile.chatgpt_4o_daily_limit != 0:
        return True
    elif profile.ai_models_id.code == "o1-preview" and profile.chatgpt_o1_preview_daily_limit != 0:
        return True
    elif profile.ai_models_id.code == "o1-mini" and profile.chatgpt_o1_mini_daily_limit != 0:
        return True
    return False

async def check_start_text_generate(message: Message, user_profile: Profile, session_profile: ChatSession) -> dict:
    if session_profile.active_generation:
        await message.delete()
        return {'text': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞', 'status': True}
    elif user_profile.tariffs.name == "Free" and user_profile.ai_model_id in ("gpt-4o", "o1-mini", "o1-preview"):
        return {'text': "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ —Ç–∞—Ä–∏—Ñ!", 'status': True}
    elif not check_limits_for_free_tariff(user_profile):
        return {'text': "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏!", 'status': True}
    else:
        return {'text': '', 'status': False}

async def check_profile_in_cache(user: User):
    cache_value: Optional[str] = await get_cache_profile(user.id)
    if cache_value:
        profile: Optional[Profile] = await deserialization_profile(cache_value)
    else:
        profile: Optional[Profile] = await api_profile_async.get_or_create_profile(
            tgid=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            url=user.url
        )
        await set_cache_profile(user.id, await serialization_profile(profile))
    return profile

async def generic_table_excel():
    data = {
        "Name": ["Igor", "Slava"],
        "Age": [23, 25]
    }
    df = pandas.DataFrame(data)
    file_path = f"{settings.PATH_WORK}/example.xlsx"
    df.to_excel(file_path, index=False)
    return file_path

async def generic_html(data_dict: dict):
    data = f"""
    <!doctype html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <link rel="stylesheet" href="/static/css/bootstrap.min.css">
        <title>–û—Ç—á—ë—Ç –ø–æ —Å—Å—ã–ª–∫–∞–º</title>
    </head>
    <body>
        <div class="container">
            <h3 class="h4 text-center mt-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è</h3>
            <div>
                üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b><br>
                ‚îú –í—Å–µ–≥–æ: {data_dict["count_users"]}<br>
                ‚îî –†–µ—Ñ. —Å—Å—ã–ª–∫–∏: {data_dict["count_ref_links"]}<br><br>
                üìà <b>–ù–æ–≤—ã–µ –∑–∞ —Å—É—Ç–∫–∏:</b><br>
                ‚îú –í—Å–µ–≥–æ: {data_dict["count_new_users_for_day"]}<br>
                ‚îú –° —Ä–µ—Ñ. —Å—Å—ã–ª–æ–∫: {data_dict["count_new_users_for_day_with_ref_links"]}<br>
                ‚îî –° –ø–æ–∏—Å–∫–∞: 1396<br><br>
                üéì <b>–û–±—É—á–µ–Ω–∏–µ:</b><br>
                ‚îú –í—Å–µ–≥–æ: 76776<br>
                ‚îî –ó–∞ —Å—É—Ç–∫–∏: 11<br><br>
                üìä<b>MAU:</b><br>
                ‚îú –ó–∞ –¥–µ–Ω—å: 10890<br>
                ‚îî –ó–∞ 30 –¥–Ω–µ–π: 202354<br><br>
                üèÉ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º:</b><br>
                ‚îú –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 42247<br>
                ‚îú ChatGPT 3.5: 163<br>
                ‚îú ChatGPT 4: 0<br>
                ‚îú ChatGPT 4 o: 1<br>
                ‚îú ChatGPT 4 turbo: 0<br>
                ‚îú –Ø–Ω–¥–µ–∫—ÅGPT: 0<br>
                ‚îú –Ø–Ω–¥–µ–∫—ÅGPT Lite: 0<br>
                ‚îú Bard: 41567<br>
                ‚îú Claude Haiku: 0<br>
                ‚îú Claude Sonnet: 0<br>
                ‚îú Claude Opus: 0<br>
                ‚îú StableDiffusion: 429<br>
                ‚îú DallE-2: 0<br>
                ‚îú DallE-3: 2<br>
                ‚îú Midjourney: 1<br>
                ‚îú Kandinsky: 84<br>
                ‚îú –¢–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ: 0<br>
                ‚îú –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ: 0<br>
                ‚îú –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –≤–∏–¥–µ–æ: 0<br>
                ‚îú –í–∏–¥–µ–æ –≤ –º—É–ª—å—Ç: 0<br>
                ‚îú PicaArt: 0<br>
                ‚îú –ó–∞–ø—Ä–æ—Å—ã –ì–ü–¢ –∏–∑ —á–∞—Ç–∞: 38<br>
                ‚îî –ó–∞–ø—Ä–æ—Å—ã IMG –∏–∑ —á–∞—Ç–∞: 7<br><br>
                üë®‚Äçüéì <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:</b><br>
                ‚îú –î–ª—è —É—á–µ–±—ã: 11<br>
                ‚îÇ‚îú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç ChatGpt: 5<br>
                ‚îÇ‚îú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç Gemini: 6<br>
                ‚îÇ‚îú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç Claude: 0<br>
                ‚îÇ‚îú –†–µ—Ä–∞–π—Ç–∏–Ω–≥: 0<br>
                ‚îÇ‚îú –†–µ—à–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ: 0<br>
                ‚îÇ‚îî –†–µ—à–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ PRO: 5<br>
                ‚îú –î–ª—è —Ä–∞–±–æ—Ç—ã: 0<br>
                ‚îÇ‚îú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏: 0<br>
                ‚îÇ‚îî –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á—É: 0<br>
                ‚îú –î—Ä—É–≥–∏–µ: 0<br>
                ‚îÇ‚îú Youtube Summary: 0<br>
                ‚îÇ‚îú –¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å: 0<br>
                ‚îÇ‚îú –†–µ—á—å –≤ —Ç–µ–∫—Å—Ç: 0<br>
                ‚îÇ‚îú –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: 0<br>
                ‚îÇ‚îú –¢–∞—Ä–æ: 2<br>
                ‚îî‚î¥ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞: 0<br><br>
                üí∞ <b>–ü–ª–∞—Ç–µ–∂–∏:</b><br>
                ‚îú –ü–æ–¥–ø–∏—Å–æ–∫ Telegram Stars: 30<br>
                ‚îÇ‚îú –ü—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–ø–∏—Å–æ–∫: 0—à—Ç –Ω–∞ —Å—É–º–º—É 0‚ÇΩ<br>
                ‚îÇ‚îú –ü—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤: 1000‚ÇΩ<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 660 ‚≠êÔ∏è : 0<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 1100 ‚≠êÔ∏è: 0<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 2000 ‚≠êÔ∏è: 0<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 3500 ‚≠êÔ∏è: 0<br>
                ‚îÇ‚îú –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 0‚ÇΩ<br>
                ‚îÇ‚îî –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: 1000‚ÇΩ<br>
                ‚îÇ<br>
                ‚îú –ü–æ–¥–ø–∏—Å–æ–∫ Robokassa: 589<br>
                ‚îÇ‚îú –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: 5—à—Ç –Ω–∞ —Å—É–º–º—É 2450‚ÇΩ<br>
                ‚îÇ‚îú –ü—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤: 0‚ÇΩ<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 450‚ÇΩ: 5<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 990‚ÇΩ: 0<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 1800‚ÇΩ: 0<br>
                ‚îÇ‚îú –ü–æ–∫—É–ø–æ–∫ –∑–∞ 3200‚ÇΩ: 0<br>
                ‚îÇ‚îú –ü—Ä–æ–¥–ª–µ–Ω–∏–π: 5<br>
                ‚îÇ‚îú –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 490‚ÇΩ<br>
                ‚îî‚îî –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: 2450‚ÇΩ
            </div>
        </div>
    </body>
    </html>
    """
    with open("my_page.html", "w") as file:
        file.write(data)
    return f'{settings.PATH_WORK}/my_page.html'

async def get_statistic():
    file_path = await generic_html()
    return file_path


async def get_session_for_profile(profile: Profile, ai_model_id: int) -> ChatSession:
    try:
        session_profile = await api_chat_session_async.get_or_create_session(profile, ai_model_id)
    except sqlalchemy.exc.IntegrityError as e:
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å {profile.tgid} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ—ç—Ç–æ–º—É –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        profile = await api_profile_async.get_or_create_profile(
            tgid=profile.id,
            username=profile.username,
            first_name=profile.first_name,
            last_name=profile.last_name,
            url=profile.url
        )
        await set_cache_profile(profile.tgid, await serialization_profile(profile))
        session_profile = await api_chat_session_async.get_or_create_session(profile, ai_model_id)
    return session_profile

def check_balance_profile(profile: Profile) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∑–Ω–∞–π, –º–æ–∂–µ—Ç –æ–Ω —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ—Ç"""
    if profile.ai_models_id.code == "mj-5-2" and profile.mj_daily_limit_5_2 != 0:
        return True
    elif profile.ai_models_id.code == "mj-6-0" and profile.mj_daily_limit_6_0 != 0:
        return True
    elif profile.ai_models_id.code == "gpt-4o" and profile.chatgpt_4o_daily_limit != 0:
        return True
    elif profile.ai_models_id.code == "gpt-4o-mini" and profile.chatgpt_4o_mini_daily_limit != 0:
        return True
    return False

def delete_image(file_path: str):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            print(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            print(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def get_image_part(image_path, part_number, output_dir, name_file_photo):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —á–∞—Å—Ç–∏
    if part_number not in [1, 2, 3, 4]:
        raise ValueError("part_number –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 4.")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(image_path)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width, height = image.size

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    half_width = width // 2
    half_height = height // 2

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–∞—Å—Ç–µ–π
    parts = {
        1: (0, 0, half_width, half_height),  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        2: (half_width, 0, width, half_height),  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
        3: (0, half_height, half_width, height),  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        4: (half_width, half_height, width, height)  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    }

    # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å
    part_coords = parts[part_number]
    part_image = image.crop(part_coords)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    output_path = os.path.join(output_dir, f"{name_file_photo}.png")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    part_image.save(output_path)

    return output_path

def create_safe_filename(url, suffix=".png"):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –∏–∑ URL
    hash_object = hashlib.md5(url.encode())
    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ö–µ—à –≤ —Å—Ç—Ä–æ–∫—É
    hash_name = hash_object.hexdigest()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –Ω—É–∂–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
    return f"{hash_name}{suffix}"